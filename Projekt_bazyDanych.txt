a)
create or replace PROCEDURE add_city (
    country STRING,
    city STRING
) AS
BEGIN
    INSERT INTO weather (
	country,
	city
        ) VALUES (            
	country,
        city
        );
EXCEPTION
    WHEN others THEN
        dbms_output.put_line('procedura nieudana');
END;
****************************************************
CREATE OR REPLACE PROCEDURE change_cityname (
    country_input STRING,
    city_input STRING
) AS
    not_updated EXCEPTION;
BEGIN
    UPDATE weather
    SET
        city = city_input
    WHERE
        country = country_input;

    IF ( SQL%rowcount = 0 ) THEN
        RAISE not_updated;
    END IF;
EXCEPTION
    WHEN not_updated THEN
        dbms_output.put_line('cos poszlo nie tak. ERROR');
    WHEN OTHERS THEN
        dbms_output.put_line('procedura nieudana');
END;
*********************************************************
CREATE OR REPLACE PROCEDURE delete_city (
    city_input STRING
) AS
    not_deleted EXCEPTION;
BEGIN
    DELETE FROM weather
    WHERE
        city = city_input;

    IF ( SQL%rowcount = 0 ) THEN
        RAISE not_deleted;
    END IF;
EXCEPTION
    WHEN not_deleted THEN
        dbms_output.put_line('cos poszlo nie tak. ERROR');
    WHEN OTHERS THEN
        dbms_output.put_line('procedura nieudana');
END;


b)
CREATE TABLE archive_data ( country varchar(20) DEFAULT NULL, city varchar(20) DEFAULT NULL, condition CLOB DEFAULT NULL, temp NUMBER(19,0) DEFAULT NULL, minTemp NUMBER(19,0) DEFAULT NULL, maxTemp NUMBER(19,0) DEFAULT NULL, pressure NUMBER(19,0) DEFAULT NULL, 
humidity NUMBER(19,0) DEFAULT NULL, windSpeed float DEFAULT NULL, latitude float DEFAULT NULL,
                        longitude float DEFAULT NULL, timeOfLastCheck DATE);
**************************************************************************************
CREATE TRIGGER server.delete_data
AFTER DELETE 
ON weather
BEGIN
    INSERT INTO archive_data(
	COUNTRY,
	CITY,
	CONDITION,
	TEMP,
	minTemp,
	maxTemp,
	PRESSURE,
	HUMIDITY,
	windSpeed,
	LATITUDE,
	LONGITUDE,
	timeOfLastCheck)
    
    select COUNTRY, CITY, CONDITION, TEMP,minTemp,maxTemp,PRESSURE,HUMIDITY,windSpeed,LATITUDE,LONGITUDE,timeOfLastCheck 
        from weather;
END;

*********************************************************************
c) 
*********************************************************************
CREATE TABLE show_logs
(
  id NUMBER GENERATED by default on null as IDENTITY,
  USERNAME VARCHAR(20),
  change_ VARCHAR(20) Check(change_ in('insert', 'update', 'delete')),
  time_ TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*****************************************
CREATE OR REPLACE TRIGGER tabel_insert 
AFTER INSERT 
ON weather
FOR EACH ROW
BEGIN
    INSERT INTO show_logs (USERNAME, change_, TIME_)
    VALUES (USER, 'insert', SYSDATE);
END;

****************************************
CREATE TRIGGER tabel_update AFTER UPDATE ON weather
FOR EACH ROW
BEGIN
    INSERT INTO show_logs (USERNAME, change_, TIME_)
    VALUES (USER, 'update', SYSDATE);
END;

******************************************
CREATE TRIGGER tabel_delete AFTER UPDATE ON weather
FOR EACH ROW
BEGIN
    INSERT INTO show_logs (USERNAME, change_, TIME_)
    VALUES (USER, 'delete', SYSDATE);
END;

**********************************************************
d i f)
************************************************************
create or replace PROCEDURE finfdCity (
    city_v IN STRING,
    temp_v OUT NUMBER
) IS
BEGIN
    SELECT temp INTO temp_v FROM weather WHERE temp=temp_v;
END;

CREATE PROCEDURE show_temp IS
    temperature weather.temp%TYPE;
BEGIN
	findCity('Warszawa', temperature);
	dbms_output.put_line(temperature);
	findCity('Olsztyn', temperature);
    dbms_output.put_line(temperature);
EXCEPTION
    WHEN others THEN
        dbms_output.put_line('something goes wrong');
END;


***************************************************************

DECLARE
    v_city STRING;
    v_country weather.country%TYPE := '&country';
BEGIN
    SELECT city INTO v_city FROM weather
    WHERE country = v_country;
    DBMS_OUTPUT.PUT_LINE('Miasta w kraju:  '|| v_city);
    FOR city IN (SELECT city INTO v_city FROM weather
        WHERE country = v_country ORDER BY city) LOOP
    DBMS_OUTPUT.PUT_LINE(city.city);
    END LOOP;
EXCEPTION
    WHEN no_data_found THEN
        DBMS_OUTPUT.PUT_LINE('Nie istnieje kraj o nazwie '|| v_country);
END;

****************************************************************
create or replace PROCEDURE temp_info_by_city_name (
    cityname VARCHAR2
) IS
    temp weather.temp%TYPE;
BEGIN
    select weather.temp into temp from weather where(weather.city = cityname);
    dbms_output.put_line(cityname || ' ' || temp);
END;

*****************************************************************
create or replace FUNCTION get_avg_pressure_for_country(
    country_name VARCHAR2
) 
RETURN NUMBER
IS
    avg_pressure NUMBER := 0;
BEGIN
    -- get total sales
    SELECT AVG(pressure)
    INTO avg_pressure
    FROM weather
    WHERE country = country_name;

    -- return the avg pressure
    RETURN avg_pressure;
END;

*************************************************************
F)
*************************************************************
create or replace TRIGGER humidityANDpressure_validate_insert
    instead of insert or update on view_weather
FOR EACH ROW
    
DECLARE 
    humidity_exception exception;
    pressure_exception exception;
BEGIN
  IF :new.humidity <30 OR :new.humidity>100 THEN 
      RAISE humidity_exception;
  ELSIF :new.pressure < 900 OR :new.pressure > 1200 THEN
      RAISE pressure_exception;
  ELSE
   INSERT INTO weather (COUNTRY, CITY, CONDITION, TEMP, MINTEMP, MAXTEMP, PRESSURE, HUMIDITY, WINDSPEED, LATITUDE, LONGITUDE, TIMEOFLASTCHECK, CITY_ID) VALUES (:NEW.COUNTRY, :NEW.CITY, :NEW.CONDITION, :NEW.TEMP, :NEW.MINTEMP, :NEW.MAXTEMP, :NEW.PRESSURE, :NEW.HUMIDITY, :NEW.WINDSPEED, :NEW.LATITUDE, :NEW.LONGITUDE, :NEW.TIMEOFLASTCHECK, :NEW.CITY_ID);
  END IF;
  


EXCEPTION 
    WHEN DUP_VAL_ON_INDEX THEN
          dbms_output.put_line('-20001 You have tried to insert a duplicate id.');
    WHEN humidity_exception THEN
        dbms_output.put_line('humidity error ' || :new.city || ' error value: ' || :new.humidity);
    
    WHEN pressure_exception THEN
        dbms_output.put_line('pressure error ' || :new.city || ' error value: ' || :new.pressure);
    WHEN OTHERS THEN
        dbms_output.put_line('-20002 An error has occurred inserting an order.');
END;

********************************************************************
7
********************************************************************
CREATE or replace PROCEDURE make_summary_temp(b_month INT, e_month INT) IS

BEGIN
FOR row_data IN (SELECT city, EXTRACT(month FROM TIMEOFLASTCHECK) AS summary_month, AVG(temp) AS  summary_avg 
                    FROM weather WHERE  EXTRACT(month FROM TIMEOFLASTCHECK) BETWEEN b_month and e_month 
                    GROUP BY city, EXTRACT(month from TIMEOFLASTCHECK))
LOOP
    INSERT INTO temp_summary VALUES(temp_summary_id.nextval, row_data.city, row_data.summary_month, row_data.summary_avg);
END LOOP;
END;

********************************
create or replace PROCEDURE make_summary_humidity(b_month INT, e_month INT) IS

BEGIN
FOR row_data IN (SELECT city, EXTRACT(month FROM TIMEOFLASTCHECK) AS summary_month, ROUND(AVG(humidity),3) summary_avg 
                    FROM weather WHERE  EXTRACT(month FROM TIMEOFLASTCHECK) BETWEEN b_month and e_month 
                    GROUP BY city, EXTRACT(month from TIMEOFLASTCHECK))
LOOP
    INSERT INTO humidity_summary VALUES(HUMIDITY_SUMMARY_ID.nextval, row_data.city, row_data.summary_month, row_data.summary_avg);
END LOOP;
END;

********************************
create or replace PROCEDURE make_summary_pressure(b_month INT, e_month INT) IS

BEGIN
FOR row_data IN (SELECT city, EXTRACT(month FROM TIMEOFLASTCHECK) AS summary_month, ROUND(AVG(pressure), 3) summary_avg 
                    FROM weather WHERE  EXTRACT(month FROM TIMEOFLASTCHECK) BETWEEN b_month and e_month 
                    GROUP BY city, EXTRACT(month from TIMEOFLASTCHECK))
LOOP
    INSERT INTO pressure_summary VALUES(PRESSURE_SUMMARY_ID.nextval, row_data.city, row_data.summary_month, row_data.summary_avg);
END LOOP;
END;